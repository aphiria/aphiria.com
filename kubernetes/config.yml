# TODOS
# - I believe my issue is with Windows running localhost on port 80 via the ingress controller.  Running  kubectl port-forward ingress-nginx-controller-7799c6795f-xgbbd 8080:80 -n ingress-nginx (grab the actual pod name via kubectl get pods -n ingress-nginx) allows me to hit www.aphiria.com:8080.
# - Add a "Job" to run DB migrations with
# - Can/should I set the domains to something like api.aphiria.local and aphiria.local, and swap in the prod values when deploying?  What's SOP?
# - Add readiness probes to web and API
# - Should I add namespaces?
# - Update README.md, possibly including the .wslconfig I need to add per https://superuser.com/questions/1594420/cant-access-127-0-0-180-outside-of-wsl2-ubuntu-20-04 to allow accessing localhost on port 80 in WSL2 from Windows


# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: secrets
  labels:
    app: secrets
data:
  DB_HOST: "dGVzdC1ob3N0Cg==" # TODO:  Store this as a secret in GitHub
  DB_USER: "dGVzdC11c2VyCg==" # TODO:  Store this as a secret in GitHub
  DB_PASSWORD: "dGVzdC1wYXNzd29yZAo=" # TODO:  Store this as a secret in GitHub
  DB_PORT: "NTQzMgo=" # TODO:  Store this as a secret in GitHub
  DB_NAME: "ZGVmYXVsdGRiCg==" # TODO:  Store this as a secret in GitHub

---
# Web deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: aphiria.com-web:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /
              port: 80
          ports:
            - containerPort: 80

---
# Web service
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector:
    app: web
  ports:
    - name: web
      protocol: TCP
      port: 80

---
# DB service
apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: db
spec:
  ports:
    - port: 5432
  selector:
    app: db

---
# DB persistent volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv
  labels:
    type: local
    app: db
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /mnt/data

---
# DB persistent volume claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: db-pv-claim
  labels:
    app: db
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi

---
# DB deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: db
          image: postgres:16
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db-data
          env:
          # These specific env vars are required for PostgreSQL to start up
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: secrets
                key: DB_USER
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secrets
                key: DB_PASSWORD
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: db-pv-claim

---
# Ingress controller
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true" # TODO: See if this actually works as expected and doesn't interfere with api.aphiria.com
spec:
  ingressClassName: nginx
  rules:
    - host: api.aphiria.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: api
                port:
                  name: api
    - host: www.aphiria.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web
                port:
                  name: web

---
# API service
apiVersion: v1
kind: Service
metadata:
  name: api
spec:
  selector:
    app: api
  ports:
    - name: api
      protocol: TCP
      port: 80

---
# API code volume claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: api-code-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# API deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: shared-code
              mountPath: /usr/share/nginx/html
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
        - name: php
          image: aphiria.com-api:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
          envFrom:
            - secretRef:
                name: secrets
          volumeMounts:
            - name: shared-code
              mountPath: /var/www/html
      volumes:
        - name: shared-code
          persistentVolumeClaim:
            claimName: api-code-pvc
        - name: nginx-config
          configMap:
            name: nginx-config
            items:
              - key: default.conf
                path: default.conf

---
# nginx config to serve PHP files
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      index index.php index.html;
      error_log  /var/log/nginx/error.log;
      access_log /var/log/nginx/access.log;
      root /usr/share/nginx/html;
      add_header X-Frame-Options "SAMEORIGIN";
      add_header X-XSS-Protection "1; mode=block";
      add_header X-Content-Type-Options "nosniff";

      location / {
          try_files $uri $uri/ /index.php?$query_string;
      }

      location ~ \.php$ {
          try_files $uri =404;
          fastcgi_split_path_info ^(.+\.php)(/.+)$;
          fastcgi_pass php:9000;
          fastcgi_index index.php;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
          fastcgi_param PATH_INFO $fastcgi_path_info;
        }
    }
