repositories:
  - name: jetstack
    url: https://charts.jetstack.io
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
releases:
  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.16.1
    createNamespace: true
    set:
      - name: extraArgs[0]
        value: "--feature-gates=ExperimentalGatewayAPISupport=true"
      - name: crds.enabled
        value: "true"
  - name: nginx-gateway
    namespace: nginx-gateway
    chart: oci://ghcr.io/nginxinc/charts/nginx-gateway-fabric
    version: 1.2.0
    createNamespace: true
    hooks:
      - events: [ "prepare" ]
        command: "kubectl"
        args: [ "apply", "-f", "https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.2.0/standard-install.yaml" ]
    wait: true
  - name: kube-prometheus-stack
    namespace: monitoring
    chart: prometheus-community/kube-prometheus-stack
    version: "69.6.0"
    createNamespace: true
    values:
      - prometheus:
          prometheusSpec:
            retention: 7d
            resources:
              requests:
                memory: 2Gi
              limits:
                memory: 4Gi
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
                  storageClassName: standard
      - alertmanager:
          enabled: true
      - grafana:
          envFromSecret: monitoring-secrets
          adminPassword: $__env{DEFAULT_GRAFANA_ADMIN_PASSWORD}
          grafana.ini:
            alerting:
              enabled: false # Disable legacy alerting
            auth:
              disable_login_form: true
              disable_signout_menu: true
            auth.github:
              enabled: true
              allow_sign_up: true
              client_id: $__env{GITHUB_OAUTH_CLIENT_ID}
              client_secret: $__env{GITHUB_OAUTH_CLIENT_SECRET}
              scopes: user:email,read:org
              auth_url: https://github.com/login/oauth/authorize
              token_url: https://github.com/login/oauth/access_token
              api_url: https://api.github.com/user
              allowed_organizations: $__env{GITHUB_OAUTH_ORGANIZATION}
            ingress:
              enabled: false # We'll use Gateway API instead
            server:
              root_url: https://grafana.aphiria.com
              serve_from_sub_path: false
            smtp:
              enabled: true
              host: "$__env{SMTP_HOST}"
              user: "$__env{SMTP_USER}"
              password: "$__env{SMTP_PASSWORD}"
              skip_verify: true
              from_name: "$__env{SMTP_FROM_NAME}"
              from_address: "$__env{SMTP_FROM_ADDRESS}"
            unified_alerting:
              enabled: true
          persistence:
            type: pvc
            enabled: true
            storageClassName: standard
            accessModes: ["ReadWriteOnce"]
            size: 10Gi
          serviceMonitor:
            enabled: true
          defaultDashboardsEnabled: true
          # Sidecars allow dynamic configuration of Grafana without having to restart pods on deployment
          sidecar:
            alerts:
              enabled: true
              label: grafana_alert
              labelValue: "1"
              searchNamespace: ALL
            dashboards:
              enabled: true
              folderAnnotation: "grafana_folder"
              searchNamespace: ALL
            dashboardProviders:
              dashboardproviders.yaml:
                apiVersion: 1
                providers:
                  - name: grafana-dashboards-kubernetes
                    orgId: 1
                    folder: Kubernetes
                    type: file
                    disableDeletion: true
                    options:
                      path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
      - kubeStateMetrics:
          enabled: true
      - nodeExporter:
          enabled: true
      - serviceMonitor:
          enabled: true

# TODO:  Need a way to install dotdc/grafana-dashboards-kubernetes dashboards
