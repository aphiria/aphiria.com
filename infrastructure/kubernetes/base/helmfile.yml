repositories:
  - name: jetstack
    url: https://charts.jetstack.io
  - name: grafana
    url: https://grafana.github.io/helm-charts
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
releases:
  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.16.1
    createNamespace: true
    set:
      - name: extraArgs[0]
        value: "--feature-gates=ExperimentalGatewayAPISupport=true"
      - name: crds.enabled
        value: "true"
  - name: nginx-gateway
    namespace: nginx-gateway
    chart: oci://ghcr.io/nginxinc/charts/nginx-gateway-fabric
    version: 1.3.0
    createNamespace: true
    values:
      - service:
          create: true
          ports:
            - name: http
              port: 80
              targetPort: 80
            - name: https
              port: 443
              targetPort: 443
            - name: metrics
              port: 9113
              targetPort: 9113
      - metrics:
          enable: true
          service:
            create: true
            port: 9113
            targetPort: 9113
    wait: true
  - name: monitoring-stack
    namespace: monitoring
    chart: prometheus-community/kube-prometheus-stack
    version: 70.10.0
    values:
      - prometheus:
          prometheusSpec:
            retention: 15d
            storageSpec:
              volumeClaimTemplate:
                spec:
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 50Gi
      - grafana:
          # We are managing Grafana separately - we just want Prometheus with all the metric scraping for Gateway API
          enabled: false
  - name: kube-state-metrics
    namespace: monitoring
    chart: prometheus-community/kube-state-metrics
    values:
      - serviceMonitor:
          enabled: true
          namespace: monitoring
          additionalLabels:
            release: monitoring-stack
  - name: grafana
    namespace: monitoring
    chart: grafana/grafana
    # Dynamically create ConfigMaps to load the Grafana dashboards.  This deletes old dashboard ConfigMaps and recreates them every time.
    hooks:
      - events: [ "prepare" ]
        command: bash
        args:
          - -c
          - |
            set -e

            echo "ðŸ—‘  Pruning stale Grafana dashboard ConfigMapsâ€¦"
            for cm in $(kubectl get cm \
              -l grafana_dashboard=1 \
              -n monitoring \
              -o name); do
              base=$(basename "$cm" | sed 's/^grafana-dashboard-//; s/\-configmap$//')
              if [ ! -f "monitoring/dashboards/${base}.json" ]; then
                kubectl delete "$cm" -n monitoring
              fi
            done

            echo "ðŸ”„ Applying current Grafana dashboardsâ€¦"
            for file in monitoring/dashboards/*.json; do
              name=$(basename "$file" .json)
              # Create the "monitoring" namespace if it doesn't exist
              if ! kubectl get namespace monitoring &>/dev/null; then
                echo "Namespace 'monitoring' not found â†’ creating it"
                kubectl create namespace monitoring
              else
                echo "Namespace 'monitoring' already exists"
              fi
              # delete existing (if any), then create fresh without annotation
              kubectl delete cm grafana-dashboard-"$name" -n monitoring --ignore-not-found
              kubectl create configmap grafana-dashboard-"$name" \
                --from-file="$file" \
                --namespace monitoring
              kubectl label cm grafana-dashboard-"$name" \
                grafana_dashboard=1 \
                --overwrite \
                -n monitoring
            done
    values:
      - ingress:
          enabled: false
      - envFromSecrets:
          - name: monitoring-secrets
      - extraEnv:
          - name: GF_SERVER_ROOT_URL
            value: "https://grafana.aphiria.com"
          - name: GF_AUTH_DISABLE_LOGIN_FORM
            value: "true"
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
      - datasources:
          datasources.yaml:
            apiVersion: 1
            datasources:
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://monitoring-stack-kube-prom-prometheus:9090
                isDefault: true
      - grafana.ini:
          server:
            root_url: https://grafana.aphiria.com
          auth:
            disable_login_form: true
            basic_auth_enabled: false
          auth.github:
            enabled: true
            allow_sign_up: true
            scopes: user:email,read:org
            client_id: ${GITHUB_OAUTH_CLIENT_ID}
            client_secret: ${GITHUB_OAUTH_CLIENT_SECRET}
            allowed_organizations: ${GITHUB_OAUTH_ORGANIZATION}
          unified_alerting:
            enabled: true
          users:
            # Auto-add every new OAuth user to the main org
            auto_assign_org: true
            # Give them full Org-Admin privileges
            auto_assign_org_role: Admin
      - initChownData:
          enabled: false
      - persistence:
          enabled: true
          accessModes:
            - ReadWriteOnce
          size: 10Gi
          storageClassName: standard
      - sidecar:
          alerts:
            enabled: true
            label: grafana_alert
            searchNamespace:
              - monitoring
          dashboards:
            enabled: true
            label: grafana_dashboard
            labelValue: "1"
            searchNamespace:
              - monitoring
            provider:
              disableDelete: false
