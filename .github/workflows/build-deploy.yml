name: build-deploy
on:
  pull_request: # TODO: Only run this on master, not PRs
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    strategy:
      fail-fast: true
      matrix:
        include:
          - dockerfile: ./infrastructure/docker/build/Dockerfile
            image: davidbyoung/aphiria.com-build
          - dockerfile: ./infrastructure/docker/runtime/api/Dockerfile
            image: davidbyoung/aphiria.com-api
          - dockerfile: ./infrastructure/docker/runtime/web/Dockerfile
            image: davidbyoung/aphiria.com-web
      max-parallel: 1 # We want the matrix to run in sequence, not parallel
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Log Into Docker Hub
        uses: docker/login-action@v3
        with:
          username: davidbyoung
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Set Up Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ matrix.image }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    environment: production
    # TODO: RE-ENABLE ONCE I AM DONE DEBUGGING! needs: build
    steps:
      - name: Check Out Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.4
      # TODO: Delete this, too
      - name: Install doctl2
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      # TODO: Remove this.  I'm just testing if having the kubeconfig setup allows me to grab the IP of the LB and setting a records with it.
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save 341491de-104b-4060-8bb6-fa65b4901f26
      - name: Terraform Plan
        run: |
          terraform -chdir=./infrastructure/terraform init -backend-config="access_key=${{ secrets.DIGITALOCEAN_SPACES_ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.DIGITALOCEAN_SPACES_SECRET_KEY }}"
          terraform -chdir=./infrastructure/terraform validate
          terraform -chdir=./infrastructure/terraform plan -var="do_access_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" -no-color -input=false
      - name: Terraform Apply
        run: terraform -chdir=./infrastructure/terraform apply -var="do_access_token=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" -no-color -input=false -auto-approve
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save $(terraform-bin -chdir=./infrastructure/terraform output -raw cluster_id)
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Helm Charts
        run: |
          # Install some needed CRDs
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.0.0/standard-install.yaml

          # Install Helm charts
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.13.2 --set installCRDs=true --set "extraArgs={--feature-gates=ExperimentalGatewayAPISupport=true}"
          helm upgrade --install nginx-gateway oci://ghcr.io/nginxinc/charts/nginx-gateway-fabric  --create-namespace --wait -n nginx-gateway
      - name: Apply Kubernetes Config
        run: |
          # Delete the database migration if it existed so we can run it on every deployment
          kubectl delete jobs db-migration --ignore-not-found=true
          # Write secrets to files so we can apply them
          echo "${{ secrets.KUBERNETES_SECRETS }}" > env-var-secrets.yml
          echo "${{ secrets.DIGITALOCEAN_SECRETS }}" > digitalocean-secrets.yml
          # Apply configs
          kubectl apply -f env-var-secrets.yml -f digitalocean-secrets.yml
          kubectl apply -f infrastructure/kubernetes/cert-prod.yml
          kubectl apply -f infrastructure/kubernetes/config.yml

      # TODO: Need to figure out how I'm going to set up TLS certs in prod
